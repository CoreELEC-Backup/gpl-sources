##############
# Works on hosts Windows (x64)
# Download Visual Studio 2010

##########################
# Checks the host platform

HOST_PLATFORM = linux
ifeq ($(shell uname -a),)
  HOST_PLATFORM = windows
else ifneq ($(findstring MINGW,$(shell uname -a)),)
  HOST_PLATFORM = windows
else ifneq ($(findstring Darwin,$(shell uname -a)),)
  HOST_PLATFORM = darwin
else ifneq ($(findstring win,$(shell uname -a)),)
  HOST_PLATFORM = windows
endif

####################################
# Core-specific switches

FRONTEND_SUPPORTS_RGB565=1

####################################
# Variable setup for Makefile.common

CORE_DIR  ?= ..
BUILD_DIR ?= .
INCLUDES   = 

include $(BUILD_DIR)/Makefile.common

#################
# Github version

GIT_VERSION := " $(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
	COREDEFINES += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif

#################
# Toolchain setup

CC  = cl.exe
CXX = cl.exe

PATH := $(shell IFS=$$'\n'; cygpath "$(VS100COMNTOOLS)../../VC/bin/amd64"):$(PATH)
PATH := $(PATH):$(shell IFS=$$'\n'; cygpath "$(VS100COMNTOOLS)../IDE")
INCLUDE := $(shell IFS=$$'\n'; cygpath "$(VS100COMNTOOLS)../../VC/include")
LIB := $(shell IFS=$$'\n'; cygpath "$(VS100COMNTOOLS)../../VC/lib/amd64")

WindowsSdkDir := $(shell reg query "HKLM\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.0A" -v "InstallationFolder" | grep -o '[A-Z]:\\.*')lib/x64
WindowsSdkDir ?= $(shell reg query "HKLM\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.1A" -v "InstallationFolder" | grep -o '[A-Z]:\\.*')lib/x64

export INCLUDE := $(INCLUDE)
export LIB := $(LIB);$(WindowsSdkDir)

############
# Extensions

OBJEXT = .obj
SOEXT  = .dll

################
# Platform setup

STATIC_LINKING = 0
platform       = win
PLATDEFS       = 
PLATCFLAGS     = $(COREDEFINES) -DWIN32 -D_WINDOWS -D_USRDLL -D_CRT_SECURE_NO_WARNINGS -DMSVC2010_EXPORTS
PLATCXXFLAGS   = $(PLATCFLAGS)
#PLATLDFLAGS   = -shared -lm
#PLATLDXFLAGS   = -shared -lm

################
# libretro setup

RETRODEFS     = -D__LIBRETRO__
RETROCFLAGS   =
RETROCXXFLAGS =
RETROLDFLAGS  =
RETROLDXFLAGS =

#################
# Final variables

DEFINES  = $(PLATDEFS) $(COREDEFINES) $(RETRODEFS)
CFLAGS   = $(PLATCFLAGS) $(RETROCFLAGS) $(DEFINES) $(INCLUDES)
CXXFLAGS = $(PLATCXXFLAGS) $(RETROCXXFLAGS) $(DEFINES) $(INCLUDES)
LDFLAGS  = $(PLATLDFLAGS) $(RETROLDFLAGS)
LDXFLAGS = $(PLATLDXFLAGS) $(RETROLDXFLAGS)

########
# Tuning

ifeq ($(DEBUG),1)
  CFLAGS   += -Od -Zi -D_DEBUG
  CXXFLAGS += -Od -Zi -D_DEBUG
  LDFLAGS  += -DEBUG -DLL
else
  CFLAGS   += -O2 -DNDEBUG
  CXXFLAGS += -O2 -DNDEBUG
  LDFLAGS  += -DLL
endif

ifneq ($(LOG_PERFORMANCE),)
  CFLAGS   += -DLOG_PERFORMANCE
  CXXFLAGS += -DLOG_PERFORMANCE
endif

###############
# Include rules

include $(BUILD_DIR)/Makefile.rules

print-%:
	@echo '$*=$($*)'
