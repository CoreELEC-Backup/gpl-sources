--- /dev/null
+++ b/caller.sh
@@ -0,0 +1,116@@
+#!/usr/bin/env bash
+
+# usage function
+function usage()
+{
+   cat << HEREDOC
+
+   Usage: $progname --source PATH [--config FILE] -- Follow process code
+
+   optional arguments:
+     -h, --help           show this help message and exit
+     -c, --config FILE    path where the configs for this build (if empty
+                          source dir is used)
+     -s, --source PATH    path where the source is places
+
+HEREDOC
+}
+
+# initialize variables
+DOUBLE_QUOTES_PSEUDO="\[DQ\]"
+DOUBLE_QUOTES="\""
+
+progname=$(basename $0)
+source_path=
+config_path=
+
+# Change pseudo double quote to right one (cmake ExternalProject fix where not
+# give them correct)
+set --  `echo $@ | sed -e "s/$DOUBLE_QUOTES_PSEUDO/$DOUBLE_QUOTES/g"`
+
+# use getopt and store the output into $OPTS
+# note the use of -o for the short options, --long for the long name options
+# and a : for any option that takes a parameter
+OPTS=$(getopt -o "hs:c:v" --long "help,source:,config:,verbose,dry-run" -n "$progname" -- "$@")
+if [ $? != 0 ] ; then echo "Error in command line arguments." >&2 ; usage; exit 1 ; fi
+eval set -- "$OPTS"
+
+while true; do
+  # uncomment the next line to see how shift is working
+  # echo "\$1:\"$1\" \$2:\"$2\""
+  case "$1" in
+    -h | --help ) usage; exit; ;;
+    -c | --config ) config_path=$(echo $2 | tr -d '"'); shift 2 ;;
+    -s | --source ) source_path=$(echo $2 | tr -d '"'); shift 2 ;;
+    --dry-run ) dryrun=1; shift ;;
+    -v | --verbose ) verbose=$((verbose + 1)); shift ;;
+    -- ) shift; break ;;
+    * ) break ;;
+  esac
+done
+
+if [ -z $source_path ]; then
+  echo "ERROR: Source path is needed to set"
+  exit 1
+fi
+if [ ! -d $source_path ]; then
+  echo "ERROR: Given source path '$source_path' not exist"
+  exit 1
+fi
+
+if [ -z $config_path ]; then
+  config_path="$source_path/mingw.conf"
+fi
+if [ ! -f $config_path ]; then
+  echo "ERROR: Given config file '$config_path' not exist"
+  exit 1
+fi
+
+. "$config_path"
+
+   # print out all the parameters we read in
+   cat <<-EOM
+   Mingw build:
+   -----------------------------------------------------------------------------
+   Source path  = "$source_path"
+   Config file  = "$config_path"
+   MinGW OS     = $MINGW_CPU_ARCH
+   Target OS    = $MINGW_TARGET_ARCH
+   Command      = "$@"
+EOM
+
+CALLCMD=$@
+
+set -a
+
+CC="${CC:-$MINGW_CPU_ARCH-w64-mingw32-gcc}"
+CXX="${CXX:-$MINGW_CPU_ARCH-w64-mingw32-g++}"
+LD="${LD:-$MINGW_CPU_ARCH-w64-mingw32-ld}"
+AR="${AR:-$MINGW_CPU_ARCH-w64-mingw32-ar}"
+CCAS="${CCAS:-$MINGW_CPU_ARCH-w64-mingw32-gcc -c}"
+RANLIB="${RANLIB:-$MINGW_CPU_ARCH-w64-mingw32-ranlib}"
+STRIP="${STRIP:-$MINGW_CPU_ARCH-w64-mingw32-strip}"
+CPPFLAGS="${CPPFLAGS:--I$MINGW_INSTALL_PREFIX/include $CPPFLAGS}"
+CFLAGS="${CFLAGS:--I$MINGW_INSTALL_PREFIX/include -g -O2 $CFLAGS}"
+CXXFLAGS="${CXXFLAGS:--I$MINGW_INSTALL_PREFIX/include -g -O2 $CXXFLAGS}"
+LDFLAGS="${LDFLAGS:--L$MINGW_INSTALL_PREFIX/lib $LDFLAGS}"
+
+# Set the paths
+PATH=$PATH:$MINGW_ENV_PATH
+if [[ $MINGW_CPU_ARCH == "x86_64" ]]; then
+  PATH=/mingw64/bin:$PATH
+else
+  PATH=/mingw32/bin:$PATH
+fi
+PATH=/opt/$MINGW_CPU_ARCH-w64-mingw32/bin:$PATH
+PATH=/opt/bin:$PATH
+PATH=$__VSCMD_PREINIT_PATH:$PATH
+PATH=$MINGW_INSTALL_PREFIX/bin:$PATH
+# INCLUDE=$MINGW_INCLUDE
+# LIB=$MINGW_LIB
+# LIBPATH=$MINGW_LIBPATH
+PKG_CONFIG_PATH=$MINGW_INSTALL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
+
+# Call given commands
+cd $source_path
+eval $CALLCMD
