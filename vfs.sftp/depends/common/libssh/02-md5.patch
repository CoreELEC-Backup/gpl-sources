--- a/include/libssh/wrapper.h
+++ b/include/libssh/wrapper.h
@@ -66,7 +66,7 @@ struct ssh_cipher_struct;
 struct ssh_crypto_struct;
 
 typedef struct ssh_mac_ctx_struct *ssh_mac_ctx;
-MD5CTX md5_init(void);
+MD5CTX ssh_md5_init(void);
 void md5_update(MD5CTX c, const void *data, unsigned long len);
 void md5_final(unsigned char *md,MD5CTX c);
 
--- a/src/libcrypto.c
+++ b/src/libcrypto.c
@@ -316,7 +316,7 @@ void sha512(const unsigned char *digest, int len, unsigned char *hash)
     }
 }
 
-MD5CTX md5_init(void)
+MD5CTX ssh_md5_init(void)
 {
     int rc;
     MD5CTX c = EVP_MD_CTX_create();
--- a/src/libgcrypt.c
+++ b/src/libgcrypt.c
@@ -198,7 +198,7 @@ void sha512(const unsigned char *digest, int len, unsigned char *hash) {
   gcry_md_hash_buffer(GCRY_MD_SHA512, hash, digest, len);
 }
 
-MD5CTX md5_init(void) {
+MD5CTX ssh_md5_init(void) {
   MD5CTX c = NULL;
   gcry_md_open(&c, GCRY_MD_MD5, 0);
 
--- a/src/libmbedcrypto.c
+++ b/src/libmbedcrypto.c
@@ -338,7 +338,7 @@ void sha512(const unsigned char *digest, int len, unsigned char *hash)
     }
 }
 
-MD5CTX md5_init(void)
+MD5CTX ssh_md5_init(void)
 {
     MD5CTX ctx = NULL;
     int rc;
--- a/src/pki_gcrypt.c
+++ b/src/pki_gcrypt.c
@@ -256,7 +256,7 @@ static int passphrase_to_key(char *data, unsigned int datalen,
   unsigned int md_not_empty;
 
   for (j = 0, md_not_empty = 0; j < keylen; ) {
-    md = md5_init();
+    md = ssh_md5_init();
     if (md == NULL) {
       return -1;
     }
--- a/src/session.c
+++ b/src/session.c
@@ -1005,7 +1005,7 @@ int ssh_get_pubkey_hash(ssh_session session, unsigned char **hash)
         return SSH_ERROR;
     }
 
-    ctx = md5_init();
+    ctx = ssh_md5_init();
     if (ctx == NULL) {
         SAFE_FREE(h);
         return SSH_ERROR;
@@ -1195,7 +1195,7 @@ int ssh_get_publickey_hash(const ssh_key key,
                 goto out;
             }
 
-            ctx = md5_init();
+            ctx = ssh_md5_init();
             if (ctx == NULL) {
                 free(h);
                 rc = -1;

