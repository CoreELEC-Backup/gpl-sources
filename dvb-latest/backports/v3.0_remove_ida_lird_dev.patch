diff --git a/drivers/media/rc/lirc_dev.c b/drivers/media/rc/lirc_dev.c
index 7d78a30..09f7e20 100644
--- a/drivers/media/rc/lirc_dev.c
+++ b/drivers/media/rc/lirc_dev.c
@@ -22,7 +22,6 @@
 #include <linux/mutex.h>
 #include <linux/device.h>
 #include <linux/file.h>
-#include <linux/idr.h>
 #include <linux/poll.h>
 #include <linux/sched.h>
 #include <linux/wait.h>
@@ -34,8 +33,10 @@
 
 static dev_t lirc_base_dev;
 
-/* Used to keep track of allocated lirc devices */
-static DEFINE_IDA(lirc_ida);
+/* This mutex protects the irctls array */
+static DEFINE_MUTEX(lirc_dev_lock);
+
+static struct rc_dev *irctls[RC_DEV_MAX];
 
 /* Only used for sysfs but defined to void otherwise */
 static struct class *lirc_class;
@@ -748,6 +749,10 @@ static void lirc_release_device(struct device *ld)
 {
 	struct rc_dev *rcdev = container_of(ld, struct rc_dev, lirc_dev);
 
+	mutex_lock(&lirc_dev_lock);
+	irctls[MINOR(rcdev->lirc_dev.devt)] = NULL;
+	mutex_unlock(&lirc_dev_lock);
+
 	put_device(&rcdev->dev);
 }
 
@@ -756,9 +761,20 @@ int ir_lirc_register(struct rc_dev *dev)
 	const char *rx_type, *tx_type;
 	int err, minor;
 
-	minor = ida_simple_get(&lirc_ida, 0, RC_DEV_MAX, GFP_KERNEL);
-	if (minor < 0)
-		return minor;
+	mutex_lock(&lirc_dev_lock);
+
+	/* find first free slot for driver */
+	for (minor = 0; minor < RC_DEV_MAX; minor++)
+		if (!irctls[minor])
+			break;
+
+	if (minor == RC_DEV_MAX) {
+		dev_err(&dev->dev, "no free slots for drivers!\n");
+		mutex_unlock(&lirc_dev_lock);
+		return -ENOMEM;
+	}
+	irctls[minor] = dev;
+	mutex_unlock(&lirc_dev_lock);
 
 	device_initialize(&dev->lirc_dev);
 	dev->lirc_dev.class = lirc_class;
@@ -801,7 +817,10 @@ int ir_lirc_register(struct rc_dev *dev)
 	return 0;
 
 out_ida:
-	ida_simple_remove(&lirc_ida, minor);
+	mutex_lock(&lirc_dev_lock);
+	irctls[minor] = NULL;
+	mutex_unlock(&lirc_dev_lock);
+
 	return err;
 }
 
@@ -819,7 +838,9 @@ void ir_lirc_unregister(struct rc_dev *dev)
 	spin_unlock_irqrestore(&dev->lirc_fh_lock, flags);
 
 	cdev_device_del(&dev->lirc_cdev, &dev->lirc_dev);
-	ida_simple_remove(&lirc_ida, MINOR(dev->lirc_dev.devt));
+	mutex_lock(&lirc_dev_lock);
+	irctls[MINOR(dev->lirc_dev.devt)] = NULL;
+	mutex_unlock(&lirc_dev_lock);
 }
 
 int __init lirc_dev_init(void)
