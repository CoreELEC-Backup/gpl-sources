--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -237,7 +237,11 @@ IF(ENABLE_TEST)
 ENDIF(ENABLE_TEST)
 
 IF(WIN32)
-  IF(WINDOWS_VERSION STREQUAL "WIN8")
+  IF(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+    SET(NTDDI_VERSION 0x0A000000)
+    SET(_WIN32_WINNT 0x0A00)
+    SET(WINVER 0x0602)
+  ELSEIF(WINDOWS_VERSION STREQUAL "WIN8")
     SET(NTDDI_VERSION 0x06020000)
     SET(_WIN32_WINNT 0x0602)
     SET(WINVER 0x0602)
@@ -261,12 +265,12 @@ IF(WIN32)
     SET(NTDDI_VERSION 0x05010000)
     SET(_WIN32_WINNT 0x0501)
     SET(WINVER 0x0501)
-  ELSE(WINDOWS_VERSION STREQUAL "WIN8")
+  ELSE(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
     # Default to Windows Server 2003 API if we don't recognize the specifier
     SET(NTDDI_VERSION 0x05020000)
     SET(_WIN32_WINNT 0x0502)
     SET(WINVER 0x0502)
-  ENDIF(WINDOWS_VERSION STREQUAL "WIN8")
+  ENDIF(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
 ENDIF(WIN32)
 
 IF(MSVC)
@@ -1390,8 +1394,13 @@ CHECK_FUNCTION_EXISTS_GLIBC(utimensat HAVE_UTIMENSAT)
 CHECK_FUNCTION_EXISTS_GLIBC(vfork HAVE_VFORK)
 CHECK_FUNCTION_EXISTS_GLIBC(wcrtomb HAVE_WCRTOMB)
 CHECK_FUNCTION_EXISTS_GLIBC(wcscmp HAVE_WCSCMP)
-CHECK_FUNCTION_EXISTS_GLIBC(wcscpy HAVE_WCSCPY)
-CHECK_FUNCTION_EXISTS_GLIBC(wcslen HAVE_WCSLEN)
+IF(NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
+  CHECK_FUNCTION_EXISTS_GLIBC(wcscpy HAVE_WCSCPY)
+  CHECK_FUNCTION_EXISTS_GLIBC(wcslen HAVE_WCSLEN)
+ELSE()
+  SET(HAVE_WCSCPY 1)
+  SET(HAVE_WCSLEN 1)
+ENDIF(NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
 CHECK_FUNCTION_EXISTS_GLIBC(wctomb HAVE_WCTOMB)
 CHECK_FUNCTION_EXISTS_GLIBC(_ctime64_s HAVE__CTIME64_S)
 CHECK_FUNCTION_EXISTS_GLIBC(_fseeki64 HAVE__FSEEKI64)
@@ -2004,7 +2013,9 @@ CHECK_CRYPTO("MD5;RMD160;SHA1;SHA256;SHA384;SHA512" OPENSSL)
 # Libmd has to be probed after OpenSSL.
 CHECK_CRYPTO("MD5;RMD160;SHA1;SHA256;SHA512" LIBMD)
 
-CHECK_CRYPTO_WIN("MD5;SHA1;SHA256;SHA384;SHA512")
+IF(NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
+  CHECK_CRYPTO_WIN("MD5;SHA1;SHA256;SHA384;SHA512")
+ENDIF(NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
 
 # Generate "config.h" from "build/cmake/config.h.in"
 CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/build/cmake/config.h.in
@@ -2037,7 +2048,7 @@ ENDIF(WIN32 AND NOT CYGWIN)
 INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/libarchive)
 #
 IF(MSVC)
-  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
+  ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE)
 ENDIF(MSVC)
 
 IF(APPLE)
--- a/cpio/CMakeLists.txt
+++ b/cpio/CMakeLists.txt
@@ -20,10 +20,10 @@ IF(ENABLE_CPIO)
   )
   INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/test_utils)
   INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../libarchive_fe)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
     LIST(APPEND bsdcpio_SOURCES cpio_windows.c)
     LIST(APPEND bsdcpio_SOURCES cpio_windows.h)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
 
   # bsdcpio documentation
   SET(bsdcpio_MANS bsdcpio.1)
--- a/libarchive/CMakeLists.txt
+++ b/libarchive/CMakeLists.txt
@@ -211,14 +211,14 @@ SET(libarchive_MANS
   tar.5
 )
 
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
   LIST(APPEND libarchive_SOURCES archive_entry_copy_bhfi.c)
   LIST(APPEND libarchive_SOURCES archive_read_disk_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.h)
   LIST(APPEND libarchive_SOURCES archive_write_disk_windows.c)
   LIST(APPEND libarchive_SOURCES filter_fork_windows.c)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
 
 IF(ARCHIVE_BLAKE2)
   LIST(APPEND libarchive_SOURCES archive_blake2sp_ref.c)
--- a/libarchive/archive_check_magic.c
+++ b/libarchive/archive_check_magic.c
@@ -67,7 +67,11 @@ diediedie(void)
 {
 #if defined(_WIN32) && !defined(__CYGWIN__) && defined(_DEBUG)
 	/* Cause a breakpoint exception  */
-	DebugBreak();
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+  __debugbreak();
+#else
+  DebugBreak();
+#endif
 #endif
 	abort();        /* Terminate the program abnormally. */
 }
--- a/libarchive/archive_entry.h
+++ b/libarchive/archive_entry.h
@@ -303,7 +303,7 @@ __LA_DECL int archive_entry_is_encrypted(struct archive_entry *);
 
 __LA_DECL void	archive_entry_set_atime(struct archive_entry *, time_t, long);
 __LA_DECL void  archive_entry_unset_atime(struct archive_entry *);
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 __LA_DECL void archive_entry_copy_bhfi(struct archive_entry *, BY_HANDLE_FILE_INFORMATION *);
 #endif
 __LA_DECL void	archive_entry_set_birthtime(struct archive_entry *, time_t, long);
--- a/libarchive/archive_random.c
+++ b/libarchive/archive_random.c
@@ -70,7 +70,7 @@ static void arc4random_buf(void *, size_t);
  * Random number generator function.
  * This simply calls arc4random_buf function if the platform provides it.
  */
-
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP)
 int
 archive_random(void *buf, size_t nbytes)
 {
@@ -97,6 +97,25 @@ archive_random(void *buf, size_t nbytes)
 	return ARCHIVE_OK;
 #endif
 }
+#else
+int
+archive_random(void *buf, size_t nbytes)
+{
+  BCRYPT_ALG_HANDLE hProv;
+
+  NTSTATUS success = BCryptOpenAlgorithmProvider(&hProv, BCRYPT_RSA_ALGORITHM, 0, 0);
+  if (!success) {
+    success = BCryptOpenAlgorithmProvider(&hProv, BCRYPT_RNG_ALGORITHM, 0, 0);
+  }
+  if (success) {
+    success = BCryptGenRandom(hProv, (PUCHAR)buf, (ULONG)nbytes, 0);
+    BCryptCloseAlgorithmProvider(hProv, 0);
+    if (success)
+      return ARCHIVE_OK;
+  }
+  return ARCHIVE_FAILED;
+}
+#endif
 
 #if !defined(HAVE_ARC4RANDOM_BUF) && (!defined(_WIN32) || defined(__CYGWIN__))
 
--- a/libarchive/archive_read_support_filter_bzip2.c
+++ b/libarchive/archive_read_support_filter_bzip2.c
@@ -169,6 +169,7 @@ bzip2_reader_bid(struct archive_read_filter_bidder *self, struct archive_read_fi
 static int
 bzip2_reader_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "bzip2 -d");
@@ -178,6 +179,9 @@ bzip2_reader_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_BZIP2;
 	self->name = "bzip2";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 
 
--- a/libarchive/archive_read_support_filter_grzip.c
+++ b/libarchive/archive_read_support_filter_grzip.c
@@ -109,6 +109,7 @@ grzip_bidder_bid(struct archive_read_filter_bidder *self,
 static int
 grzip_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "grzip -d");
@@ -118,4 +119,7 @@ grzip_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_GRZIP;
 	self->name = "grzip";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
--- a/libarchive/archive_read_support_filter_lrzip.c
+++ b/libarchive/archive_read_support_filter_lrzip.c
@@ -120,6 +120,7 @@ lrzip_bidder_bid(struct archive_read_filter_bidder *self,
 static int
 lrzip_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "lrzip -d -q");
@@ -129,4 +130,7 @@ lrzip_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_LRZIP;
 	self->name = "lrzip";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
--- a/libarchive/archive_read_support_filter_lz4.c
+++ b/libarchive/archive_read_support_filter_lz4.c
@@ -204,6 +204,7 @@ lz4_reader_bid(struct archive_read_filter_bidder *self,
 static int
 lz4_reader_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "lz4 -d -q");
@@ -213,6 +214,9 @@ lz4_reader_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_LZ4;
 	self->name = "lz4";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 
 
--- a/libarchive/archive_read_support_filter_lzop.c
+++ b/libarchive/archive_read_support_filter_lzop.c
@@ -160,6 +160,7 @@ lzop_bidder_bid(struct archive_read_filter_bidder *self,
 static int
 lzop_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "lzop -d");
@@ -169,6 +170,9 @@ lzop_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_LZOP;
 	self->name = "lzop";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 #else
 /*
--- a/libarchive/archive_read_support_filter_program.c
+++ b/libarchive/archive_read_support_filter_program.c
@@ -82,6 +82,8 @@ archive_read_support_filter_program(struct archive *a, const char *cmd)
 	return (archive_read_support_filter_program_signature(a, cmd, NULL, 0));
 }
 
+ #if !defined(_WIN32) || WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+
 /*
  * The bidder object stores the command and the signature to watch for.
  * The 'inhibit' entry here is used to ensure that unchecked filters never
@@ -105,7 +107,7 @@ static int	program_bidder_free(struct archive_read_filter_bidder *);
  */
 struct program_filter {
 	struct archive_string description;
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	HANDLE		 child;
 #else
 	pid_t		 child;
@@ -254,7 +256,7 @@ child_stop(struct archive_read_filter *self, struct program_filter *state)
 			state->waitpid_return
 			    = waitpid(state->child, &state->exit_status, 0);
 		} while (state->waitpid_return == -1 && errno == EINTR);
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 		CloseHandle(state->child);
 #endif
 		state->child = 0;
@@ -309,7 +311,7 @@ child_read(struct archive_read_filter *self, char *buf, size_t buf_len)
 	struct program_filter *state = self->data;
 	ssize_t ret, requested, avail;
 	const char *p;
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	HANDLE handle = (HANDLE)_get_osfhandle(state->child_stdout);
 #endif
 
@@ -317,7 +319,7 @@ child_read(struct archive_read_filter *self, char *buf, size_t buf_len)
 
 	for (;;) {
 		do {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 			/* Avoid infinity wait.
 			 * Note: If there is no data in the pipe, ReadFile()
 			 * called in read() never returns and so we won't
@@ -501,3 +503,5 @@ program_filter_close(struct archive_read_filter *self)
 
 	return (e);
 }
+
+#endif
--- a/libarchive/archive_read_support_filter_xz.c
+++ b/libarchive/archive_read_support_filter_xz.c
@@ -754,6 +754,7 @@ xz_filter_close(struct archive_read_filter *self)
 static int
 lzma_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "lzma -d -qq");
@@ -763,11 +764,15 @@ lzma_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_LZMA;
 	self->name = "lzma";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 
 static int
 xz_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "xz -d -qq");
@@ -777,11 +782,15 @@ xz_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_XZ;
 	self->name = "xz";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 
 static int
 lzip_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "lzip -d -q");
@@ -791,6 +800,9 @@ lzip_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_LZIP;
 	self->name = "lzip";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 
 #endif /* HAVE_LZMA_H */
--- a/libarchive/archive_read_support_filter_zstd.c
+++ b/libarchive/archive_read_support_filter_zstd.c
@@ -147,6 +147,7 @@ zstd_bidder_bid(struct archive_read_filter_bidder *self,
 static int
 zstd_bidder_init(struct archive_read_filter *self)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 	int r;
 
 	r = __archive_read_program(self, "zstd -d -qq");
@@ -156,6 +157,9 @@ zstd_bidder_init(struct archive_read_filter *self)
 	self->code = ARCHIVE_FILTER_ZSTD;
 	self->name = "zstd";
 	return (r);
+#else
+    return ARCHIVE_FATAL;
+#endif
 }
 
 #else
--- a/libarchive/archive_read_support_format_mtree.c
+++ b/libarchive/archive_read_support_format_mtree.c
@@ -57,6 +57,8 @@ __FBSDID("$FreeBSD: head/lib/libarchive/archive_read_support_format_mtree.c 2011
 #include "archive_string.h"
 #include "archive_pack_dev.h"
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+
 #ifndef O_BINARY
 #define	O_BINARY 0
 #endif
@@ -2023,3 +2025,11 @@ readline(struct archive_read *a, struct mtree *mtree, char **start,
 		find_off = u - mtree->line.s;
 	}
 }
+
+#else
+int
+archive_read_support_format_mtree(struct archive *_a)
+{
+    return ARCHIVE_OK;
+}
+#endif
--- a/libarchive/archive_string.c
+++ b/libarchive/archive_string.c
@@ -1323,7 +1323,7 @@ free_sconv_object(struct archive_string_conv *sc)
 	free(sc);
 }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 static unsigned
 my_atoi(const char *p)
 {
--- a/libarchive/archive_util.c
+++ b/libarchive/archive_util.c
@@ -209,7 +209,7 @@ __archive_errx(int retvalue, const char *msg)
  * Create a temporary file
  */
 #if defined(_WIN32) && !defined(__CYGWIN__)
-
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 /*
  * Do not use Windows tmpfile() function.
  * It will make a temporary file under the root directory
@@ -392,6 +392,20 @@ __archive_mkstemp(wchar_t *template)
 	return __archive_mktempx(NULL, template);
 }
 
+#else
+int
+__archive_mktemp(const char *tmpdir)
+{
+    return -1;
+}
+
+int
+__archive_mkstemp(wchar_t *template)
+{
+    return -1;
+}
+#endif
+
 #else
 
 static int
--- a/libarchive/archive_windows.h
+++ b/libarchive/archive_windows.h
@@ -106,13 +106,17 @@
 #define	lseek		__la_lseek
 #define __LA_LSEEK_NEEDED
 #endif
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 #define	lstat		__la_stat
 #define	open		__la_open
 #define	read		__la_read
+#endif
 #if !defined(__BORLANDC__) && !defined(__WATCOMC__)
 #define setmode		_setmode
 #endif
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 #define	la_stat(path,stref)		__la_stat(path,stref)
+#endif
 #if !defined(__WATCOMC__)
 #if !defined(__BORLANDC__)
 #define	strdup		_strdup
@@ -122,8 +126,12 @@
 #define	umask		_umask
 #endif
 #endif
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 #define	waitpid		__la_waitpid
 #define	write		__la_write
+#else
+#define	waitpid(x1,x2,x3)		1
+#endif
 
 #if !defined(__WATCOMC__)
 
@@ -263,7 +271,6 @@
     #define	F_OK    0       /*  Test for existence of file  */
 #endif
 
-
 /* Replacement POSIX function */
 extern int	 __la_fstat(int fd, struct stat *st);
 extern int	 __la_lstat(const char *path, struct stat *st);
@@ -276,8 +283,13 @@ extern int	 __la_stat(const char *path, struct stat *st);
 extern pid_t	 __la_waitpid(HANDLE child, int *status, int option);
 extern ssize_t	 __la_write(int fd, const void *buf, size_t nbytes);
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+
 #define _stat64i32(path, st)	__la_stat(path, st)
 #define _stat64(path, st)	__la_stat(path, st)
+
+#endif
+
 /* for status returned by la_waitpid */
 #define WIFEXITED(sts)		((sts & 0x100) == 0)
 #define WEXITSTATUS(sts)	(sts & 0x0FF)
--- a/libarchive/archive_write_add_filter_program.c
+++ b/libarchive/archive_write_add_filter_program.c
@@ -330,7 +330,7 @@ int
 __archive_write_program_close(struct archive_write_filter *f,
     struct archive_write_program_data *data)
 {
-	int ret, status;
+	int ret, status = 0;
 	ssize_t bytes_read;
 
 	if (data->child == 0)
--- a/tar/CMakeLists.txt
+++ b/tar/CMakeLists.txt
@@ -24,10 +24,10 @@ IF(ENABLE_TAR)
     ../libarchive_fe/passphrase.h
   )
   INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../libarchive_fe)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
     LIST(APPEND bsdtar_SOURCES bsdtar_windows.c)
     LIST(APPEND bsdtar_SOURCES bsdtar_windows.h)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
 
   # bsdtar documentation
   SET(bsdtar_MANS bsdtar.1)

