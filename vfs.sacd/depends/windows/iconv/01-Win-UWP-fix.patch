From 9768d5af6f2497c0a26ff4dab9c7d6a76d2e6bb1 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Wed, 8 Jan 2020 09:25:27 +0000
Subject: [PATCH] Win UWP fix

---
 win_iconv.c | 33 ++++++++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/win_iconv.c b/win_iconv.c
index 6143cec..de41af1 100644
--- a/win_iconv.c
+++ b/win_iconv.c
@@ -45,6 +45,12 @@
 #define FLAG_TRANSLIT           2 /* //TRANSLIT */
 #define FLAG_IGNORE             4 /* //IGNORE */
 
+/* Default family is DESKTOP_APP which is DESKTOP | APP
+ * We want to know when we're only building for apps */
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+#define G_WINAPI_ONLY_APP
+#endif
+
 typedef unsigned char uchar;
 typedef unsigned short ushort;
 typedef unsigned int uint;
@@ -714,7 +720,13 @@ load_mlang(void)
     HMODULE h;
     if (ConvertINetString != NULL)
         return TRUE;
+  /* When building for UWP, load app asset DLLs instead of filesystem DLLs.
+   * Needs MSVC, Windows 8 and newer, and is only usable from apps. */
+#if _WIN32_WINNT >= 0x0602 && defined(G_WINAPI_ONLY_APP)
+    h = LoadPackagedLibrary(TEXT("mlang.dll"), 0);
+#else
     h = LoadLibrary(TEXT("mlang.dll"));
+#endif
     if (!h)
         return FALSE;
     ConvertINetString = (CONVERTINETSTRING)GetProcAddressA(h, "ConvertINetString");
@@ -1171,7 +1183,26 @@ libiconv_iconv_open(rec_iconv_t *cd, const char *tocode, const char *fromcode)
         dllname = xstrndup(p, e - p);
         if (dllname == NULL)
             return FALSE;
+  /* When building for UWP, load app asset DLLs instead of filesystem DLLs.
+   * Needs MSVC, Windows 8 and newer, and is only usable from apps. */
+#if _WIN32_WINNT >= 0x0602 && defined(G_WINAPI_ONLY_APP)
+        int result = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, dllname, strlen(dllname), NULL, 0);
+        if (result == 0)
+          return FALSE;
+
+        wchar_t* newStr = (wchar_t*)malloc(result*sizeof(wchar_t));
+        result = MultiByteToWideChar( CP_UTF8, MB_ERR_INVALID_CHARS, dllname, strlen(dllname), newStr, result );
+        if (result == 0)
+        {
+          free( newStr );
+          return FALSE;
+        }
+
+        hlibiconv = LoadPackagedLibrary( newStr, 0 );
+        free( newStr );
+#else
         hlibiconv = LoadLibraryA(dllname);
+#endif
         free(dllname);
         if (hlibiconv != NULL)
         {
@@ -1574,7 +1605,7 @@ static int
 utf32_mbtowc(csconv_t *cv, const uchar *buf, int bufsize, ushort *wbuf, int *wbufsize)
 {
     int codepage = cv->codepage;
-    uint wc = 0xD800;
+    uint wc = 0xD800;
 
     /* swap endian: 12000 <-> 12001 */
     if (cv->mode & UNICODE_MODE_SWAPPED)
-- 
2.19.2.windows.1

