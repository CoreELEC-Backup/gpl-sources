diff --git a/drivers/media/v4l2-core/v4l2-clk.c b/drivers/media/v4l2-core/v4l2-clk.c
index 297e10e69898..0ea394e985c7 100644
--- a/drivers/media/v4l2-core/v4l2-clk.c
+++ b/drivers/media/v4l2-core/v4l2-clk.c
@@ -39,6 +39,7 @@ static struct v4l2_clk *v4l2_clk_find(const char *dev_id)
 struct v4l2_clk *v4l2_clk_get(struct device *dev, const char *id)
 {
 	struct v4l2_clk *clk;
+#if 0
 	struct clk *ccf_clk = clk_get(dev, id);
 	char clk_name[V4L2_CLK_NAME_SIZE];
 
@@ -55,16 +56,16 @@ struct v4l2_clk *v4l2_clk_get(struct device *dev, const char *id)
 
 		return clk;
 	}
-
+#endif
 	mutex_lock(&clk_lock);
 	clk = v4l2_clk_find(dev_name(dev));
-
+#if 0
 	/* if dev_name is not found, try use the OF name to find again  */
 	if (PTR_ERR(clk) == -ENODEV && dev->of_node) {
 		v4l2_clk_name_of(clk_name, sizeof(clk_name), dev->of_node);
 		clk = v4l2_clk_find(clk_name);
 	}
-
+#endif
 	if (!IS_ERR(clk))
 		atomic_inc(&clk->use_count);
 	mutex_unlock(&clk_lock);
@@ -125,8 +126,10 @@ int v4l2_clk_enable(struct v4l2_clk *clk)
 {
 	int ret;
 
+#if 0
 	if (clk->clk)
 		return clk_prepare_enable(clk->clk);
+#endif
 
 	ret = v4l2_clk_lock_driver(clk);
 	if (ret < 0)
@@ -154,8 +157,10 @@ void v4l2_clk_disable(struct v4l2_clk *clk)
 {
 	int enable;
 
+#if 0
 	if (clk->clk)
 		return clk_disable_unprepare(clk->clk);
+#endif
 
 	mutex_lock(&clk->lock);
 
