.TH IRXEVENT "1" "Last change: Aug 2015" "irxevent @version@" "User Commands"
.SH NAME
.P
\fBirxevent\fR - infrared X-event sender
.SH SYNOPSIS
.P
\fBirxevent\fR [\fIoption\fR]... [\fIconfig file\fR]
.SH DESCRIPTION
.P
Irxevent is a program to send button clicks and key presses to X
applications triggered by a LIRC driven remote control. You can control your
favorite CD/MP3 player, your TV tuner program or any other X application
that responds to keyboard or mouse input. If you like to you can send emacs
^X^S from your armchair.

Irxevent is a complement to irexec(1) and irpty(1).
.SH OPTIONS
.TP
\fB\-d\fR \fB\-\-daemon\fR
Fork and run in background
.TP
\fB\-h\fR \fB\-\-help\fR
Display usage summary
.TP
\fB\-V\fR \fB\-\-version\fR
Display version
.SH FILES
.P
Irxevent works with the same config file as irexec and irpty
(~/.config/lircrc). For a complete sample lircrc look at examples/lircrc.
.P
Part of your .lircrc could look like this:

.nf
begin
        prog = irxevent
        button = VIDEO_UP
        config = Key SHIFT\-KP_Add CurrentWindow
end
begin
        prog = irxevent
        button = VIDEO_DOWN
        config = Key SHIFT\-KP_Subtract CurrentWindow
end
begin
        prog = irxevent
        button = STOP
        config = Key ctrl\-c CurrentWindow
end
begin
        prog = irxevent
        button = 0
        config = Key f xawtv
        config = Key f xawtv
end
begin
        prog = irxevent
        button = POWER
        config = Key q xawtv
end
begin
        prog = irxevent
        button = CH_DOWN
        config = Button 1 329 92 kscd
end
begin
        prog = irxevent
        button = UP
        config = Button 1 110 80 GQmpeg
end
begin
        prog = irxevent
        button = DOWN
        config = Button 1 130 80 GQmpeg
end
.fi

Simply said \fIconfig\fR =  lines may look like this:

.nf
config = Key [shift\-][ctrl\-][alt\-]<key> [Focus] <windowname>
        | WindowID <id> | CurrentWindow | RootWindow
config = Button <button> <x> <y> [Focus] <windowname> | WindowID <id>
        | CurrentWindow | RootWindow
config = xy_Key <x> <y> [shift\-][ctrl\-][alt\-]<key> [Focus]
        <windowname> | WindowID id | CurrentWindow | RootWindow
.fi

Some more examples:

.nf
config = Key Up xawtv
config = Key Down xawtv
config = Button 1 50 110 xclickme
config = Key q xawtv
config = Key ctrl\-c mpg123
config = Key shift\-Page_Up rxvt
.fi

In BNF this looks like:

.RS 3
.nf
LINE    = "config =" <KEY|BUTTON|XYKEY> <TARGET> |
          "config =" <KEY|BUTTON|XYKEY> "Focus" <TARGET>
XYKEY   = "xy_Key" <x_position> <y_position> <MOD><KEYSPEC>
KEY     = "Key" <MOD><KEYSPEC>
MOD     = ["shift\-"]["numlock\-"]["ctrl\-"]["alt\-"]["meta\-"]
          ["numlock\-"]["mod3\-"]["mod4\-"]["mod5\-"]["altgr\-"]["scrlock\-"]
KEYSPEC = Keyname | "KeySym:"KeySym | "KeyCode:"KeyCode
BUTTON  = "Button" <1..5> <x_position> <y_position>
TARGET  = Windowname | "WindowID" id | "CurrentWindow" | "RootWindow"
.fi

.I Keyname:
.RS 2
is the key symbol that is declared in X windows. E.g. "Up" refers to the
cursor arrow pointing up. "KP_Add" is the plus sign on the key pad. Just take
a look at irxevent.keys (in the documentation directory) if you are not sure
about a symbol's name.
.RE
.I KeySym:
.RS 2
number as returned by XStringToKeysym(3x).
.RE
.I KeyCode:
.RS 2
number as returned by XKeysymToKeycode(3x).
.RE
.I Windowname:
.RS 2
can be the first characters of the window name displayed by the window manager
or the name that is displayed below the icon. Some programs use the name
displayed by the window manager to show a lot of status information but don't
change the icon name (like xawtv). Others append information to the window
name ("GQmpeg \- kill_windooz.mp3"). If neither window name nor icon name match
the given Windowname information from XClassHint(3x) will be checked.
.RE
.I CurrentWindow:
.RS 2
refers to the active window as returned by XGetInputFocus(3x). Most times this
is the window with your mouse pointer in it.
.RE
.I RootWindow:
.RS 2
refers to the \fIroot\fR window as returned by RootWindow(3x). You may need
this to send events to the window manager.
.RE
.I WindowID id:
.RS 2
refers to the window with window identifier \fIid\fR. \fIid\fR should be a
decimal number. It is useful when irxevent can't find the desired window by
other means.
.RE
.I Focus:
.RS 2
will send the specified event to the given window only if it currently has the
input focus. This of course does not make much sense when combined with
CurrentWindow.
.RE
.RE
.SH TROUBLESHOOTING

If you have problems finding the coordinates for a button click you can try
xev \-id <window_id>. The window_id can be found using xwininfo.

There are programs that do not accept any synthetic X-events by default
because they can cause security problems. Currently xterm and xemacs are known
to ignore events simulated by irxevent.

You can however make xterm accept external events by enabling "Allow
SendEvents" in the "Main Options" (hold down the Ctrl button and press the
left mouse button inside the xterm window). You can as well place this line
into your .Xresources file to change this permanently:

.RS 3
XTerm.vt100.allowSendEvents: true
.RE

Yet another possibility is to start xterm like this:

.RS 3
xterm \-xrm "XTerm.vt100.allowSendEvents: true"
.RE

xemacs will accept events if you set a built-in variable. The following was
taken from the online help:

.RS 3
`x\-allow\-sendevents' is a built-in boolean variable.

Value: t

Documentation:

*Non-nil means to allow synthetic events.  Nil means they are ignored.

Beware: allowing emacs to process SendEvents opens a big security hole.

In order to allow events you have to evaluate this lisp code (press Meta\-x and
enter the following expression):

         (setq x\-allow\-sendevents t)

Placing this line into your .xemacs\-options file should have the same result.
.RE

If you have problems sending events please drop me an email.
.SH AUTHOR
.P
Written by Heinrich Langos <heinrich@mad.scientist.com>.
.SH "SEE ALSO"

.TP
.B xdotool(1)
invoked from irexec(1), xdotool provides a more flexible alternative
to irxevent.
.P
The documentation for \fBlirc\fR
is maintained as html pages. They are located under html/ in the
documentation directory.
