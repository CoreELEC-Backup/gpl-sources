CORE_DIR  = .
BUILD_DIR = build

ifeq ($(platform),android_arm64-v8a)
include $(BUILD_DIR)/Makefile.android_arm64-v8a
else ifeq ($(platform),android_armeabi)
include $(BUILD_DIR)/Makefile.android_armeabi
else ifeq ($(platform),android_armeabi-v7a)
include $(BUILD_DIR)/Makefile.android_armeabi-v7a
else ifeq ($(platform),android_mips)
include $(BUILD_DIR)/Makefile.android_mips
else ifeq ($(platform),android_mips64)
include $(BUILD_DIR)/Makefile.android_mips64
else ifeq ($(platform),android_x86)
include $(BUILD_DIR)/Makefile.android_x86
else ifeq ($(platform),android_x86_64)
include $(BUILD_DIR)/Makefile.android_x86_64
else ifeq ($(platform),linux-portable_x86)
include $(BUILD_DIR)/Makefile.linux-portable_x86
else ifeq ($(platform),linux-portable_x86_64)
include $(BUILD_DIR)/Makefile.linux-portable_x86_64
else ifeq ($(platform),linux_x86)
include $(BUILD_DIR)/Makefile.linux_x86
else ifeq ($(platform),linux_x86_64)
include $(BUILD_DIR)/Makefile.linux_x86_64
else ifeq ($(platform),mingw_x86)
include $(BUILD_DIR)/Makefile.mingw_x86
else ifeq ($(platform),mingw_x86_64)
include $(BUILD_DIR)/Makefile.mingw_x86_64
else ifeq ($(platform),osx_x86)
include $(BUILD_DIR)/Makefile.osx_x86
else ifeq ($(platform),osx_x86_64)
include $(BUILD_DIR)/Makefile.osx_x86_64
else ifeq ($(platform),ps3_ppc)
include $(BUILD_DIR)/Makefile.ps3_ppc
else ifeq ($(platform),wii_ppc)
include $(BUILD_DIR)/Makefile.wii_ppc
else ifeq ($(platform),windows_x86)
include $(BUILD_DIR)/Makefile.windows_x86
else ifeq ($(platform),windows_x86_64)
include $(BUILD_DIR)/Makefile.windows_x86_64
else

TARGET_NAME := gw

LOG_PERFORMANCE = 1
HAVE_COMPAT = 0

SOURCES_C   :=
SOURCES_CXX :=
LIBS    := -lm

# system platform
ifeq ($(platform),)
   platform = unix
   ifeq ($(shell uname -a),)
      platform = win
      EXE_EXT = .exe
   else ifneq ($(findstring MINGW,$(shell uname -a)),)
      platform = win
   else ifneq ($(findstring Darwin,$(shell uname -a)),)
      platform = osx
      arch = intel
      ifeq ($(shell uname -p),powerpc)
         arch = ppc
      endif
   else ifneq ($(findstring win,$(shell uname -a)),)
      platform = win
   endif
else ifneq (,$(findstring armv,$(platform)))
	ifeq (,$(findstring classic_,$(platform)))
		override platform += unix
	endif
else ifneq (,$(findstring rpi,$(platform)))
   override platform += unix
endif

CC_AS ?= $(CC)

ifeq ($(ARCHFLAGS),)
   ifeq ($(archs),ppc)
      ARCHFLAGS = -arch ppc -arch ppc64
   else
      ARCHFLAGS = -arch i386 -arch x86_64
   endif
endif

# Unix
ifneq (,$(findstring unix,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED := -shared -Wl,-version-script=$(BUILD_DIR)/link.T -Wl,-no-undefined

# Classic Platforms ####################
# Platform affix = classic_<ISA>_<ÂµARCH>
# Help at https://modmyclassic.com/comp
	
# (armv7 a7, hard point, neon based) ### 
# NESC, SNESC, C64 mini 
else ifeq ($(platform), classic_armv7_a7)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED := -shared -Wl,--no-undefined,-Bsymbolic
	CFLAGS += -Ofast \
	-flto=4 -fwhole-program -fuse-linker-plugin \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	CXXFLAGS += $(CFLAGS)
	CPPFLAGS += $(CFLAGS)
	ASFLAGS += $(CFLAGS)
	ARCH = arm
	ifeq ($(shell echo `$(CC) -dumpversion` "< 4.9" | bc -l), 1)
	  CFLAGS += -march=armv7-a
	else
	  CFLAGS += -march=armv7ve
	  # If gcc is 5.0 or later
	  ifeq ($(shell echo `$(CC) -dumpversion` ">= 5" | bc -l), 1)
	    LDFLAGS += -static-libgcc -static-libstdc++
	  endif
	endif
#######################################

# OS X
else ifeq ($(platform), osx)
   TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   OSXVER = `sw_vers -productVersion | cut -d. -f 2`
   OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
   fpic += -mmacosx-version-min=10.2

# iOS
else ifneq (,$(findstring ios,$(platform)))
   TARGET := $(TARGET_NAME)_libretro_ios.dylib
   fpic := -fPIC
   SHARED := -dynamiclib

   ifeq ($(IOSSDK),)
      IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
   endif

   ifeq ($(platform),ios-arm64)
      CC = cc -arch arm64 -isysroot $(IOSSDK)
      CXX = c++ -arch arm64 -isysroot $(IOSSDK)
   else
      CC = cc -arch armv7 -isysroot $(IOSSDK)
      CXX = c++ -arch armv7 -isysroot $(IOSSDK)
   endif

   CC_AS = perl ./tools/gas-preprocessor.pl $(CC)

   ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
      CC += -miphoneos-version-min=8.0
      CXX += -miphoneos-version-min=8.0
      CC_AS += -miphoneos-version-min=8.0
      PLATFORM_DEFINES := -miphoneos-version-min=8.0
   else
      CC += -miphoneos-version-min=5.0
      CXX += -miphoneos-version-min=5.0
      CC_AS += -miphoneos-version-min=5.0
      PLATFORM_DEFINES := -miphoneos-version-min=5.0
   endif

else ifeq ($(platform), tvos-arm64)
   TARGET := $(TARGET_NAME)_libretro_tvos.dylib
   fpic := -fPIC
   SHARED := -dynamiclib

   ifeq ($(IOSSDK),)
      IOSSDK := $(shell xcodebuild -version -sdk appletvos Path)
   endif

# Theos
else ifeq ($(platform), theos_ios)
   DEPLOYMENT_IOSVERSION = 5.0
   TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
   ARCHS = armv7 armv7s
   TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
   THEOS_BUILD_DIR := objs
   include $(THEOS)/makefiles/common.mk

   LIBRARY_NAME = $(TARGET_NAME)_libretro_ios

# QNX
else ifeq ($(platform), qnx)
   TARGET := $(TARGET_NAME)_libretro_$(platform).so
   fpic := -fPIC
   SHARED := -lcpp -lm -shared -Wl,-version-script=$(BUILD_DIR)/link.T
   CC = qcc -Vgcc_ntoarmv7le
   CC_AS = qcc -Vgcc_ntoarmv7le
   CXX = QCC -Vgcc_ntoarmv7le_cpp
   AR = QCC -Vgcc_ntoarmv7le
   PLATFORM_DEFINES := -D__BLACKBERRY_QNX__ -fexceptions -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp

# PS3
else ifneq (,$(filter $(platform), ps3 sncps3 psl1ght))
   TARGET := $(TARGET_NAME)_libretro_ps3.a
   PLATFORM_DEFINES := -D__CELLOS_LV2__
   STATIC_LINKING = 1
   HAVE_COMPAT = 1

   # sncps3
   ifneq (,$(findstring sncps3,$(platform)))
      CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      CC_AS = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      CXX = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe

   # PS3
   else ifneq (,$(findstring ps3,$(platform)))
      CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
      CC_AS = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
      CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
      AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe

   # Lightweight PS3 Homebrew SDK
   else ifneq (,$(findstring psl1ght,$(platform)))
      TARGET := $(TARGET_NAME)_libretro_$(platform).a
      CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
      CC_AS = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
      CXX = $(PS3DEV)/ppu/bin/ppu-g++$(EXE_EXT)
      AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   endif

# PSP
else ifeq ($(platform), psp1)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = psp-gcc$(EXE_EXT)
   CC_AS = psp-gcc$(EXE_EXT)
   CXX = psp-g++$(EXE_EXT)
   AR = psp-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DPSP
   CFLAGS += -G0
   CXXFLAGS += -G0
   STATIC_LINKING = 1
   HAVE_COMPAT = 1
   EXTRA_INCLUDES := -I$(shell psp-config --pspsdk-path)/include

# Xbox 360
else ifeq ($(platform), xenon)
   TARGET := $(TARGET_NAME)_libretro_xenon360.a
   CC = xenon-gcc$(EXE_EXT)
   CC_AS = xenon-gcc$(EXE_EXT)
   CXX = xenon-g++$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   PLATFORM_DEFINES := -D__LIBXENON__
   STATIC_LINKING = 1

# Nintendo GameCube / Wii / WiiU
else ifneq (,$(filter $(platform), ngc wii wiiu))
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CC_AS = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DGEKKO -mcpu=750 -meabi -mhard-float
   STATIC_LINKING = 1
   HAVE_COMPAT = 1

   # Nintendo WiiU
   ifneq (,$(findstring wiiu,$(platform)))
      PLATFORM_DEFINES += -DWIIU -DHW_RVL -mrvl

   # Nintendo Wii
   else ifneq (,$(findstring wii,$(platform)))
      PLATFORM_DEFINES += -DHW_RVL -mrvl

   # Nintendo GameCube
   else ifneq (,$(findstring ngc,$(platform)))
      PLATFORM_DEFINES += -DHW_DOL -mrvl
   endif

 # Nintendo Switch (libnx)
else ifeq ($(platform), libnx)
	include $(DEVKITPRO)/libnx/switch_rules
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   DEFINES := -DSWITCH=1 -U__linux__ -U__linux -DRARCH_INTERNAL
   CFLAGS  :=  $(DEFINES) -g \
               -O3 \
           -fPIE -I$(LIBNX)/include/ -ffunction-sections -fdata-sections -ftls-model=local-exec -Wl,--allow-multiple-definition -specs=$(LIBNX)/switch.specs
   CFLAGS += $(INCDIRS)
   CFLAGS  += $(INCLUDE)  -D__SWITCH__ -DHAVE_LIBNX -DARM -march=armv8-a -mtune=cortex-a57 -mtp=soft -fomit-frame-pointer -ffast-math
   CXXFLAGS := $(ASFLAGS) $(CFLAGS) -fno-rtti -fno-exceptions -std=gnu++11
   CFLAGS += -std=gnu11
   STATIC_LINKING = 1

# emscripten
else ifeq ($(platform), emscripten)
   TARGET := $(TARGET_NAME)_libretro_$(platform).bc
   STATIC_LINKING = 1

# CTR (3DS)
else ifeq ($(platform), ctr)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITARM)/bin/arm-none-eabi-g++$(EXE_EXT)
   AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DARM11 -D_3DS
   CFLAGS += -march=armv6k -mtune=mpcore -mfloat-abi=hard
   CFLAGS += -Wall -mword-relocations
   CFLAGS += -fomit-frame-pointer -ffast-math
   CXXFLAGS += $(CFLAGS)
   STATIC_LINKING = 1
   HAVE_COMPAT = 1

# GCW0
else ifeq ($(platform), gcw0)
   TARGET := $(TARGET_NAME)_libretro.so
   CC = /opt/gcw0-toolchain/usr/bin/mipsel-linux-gcc
   CXX = /opt/gcw0-toolchain/usr/bin/mipsel-linux-g++
   AR = /opt/gcw0-toolchain/usr/bin/mipsel-linux-ar
   SHARED := -shared -Wl,-version-script=$(BUILD_DIR)/link.T -Wl,-no-undefined
   fpic := -fPIC
   CFLAGS += -ffast-math -march=mips32 -mtune=mips32r2 -mhard-float
   CXXFLAGS += -ffast-math -march=mips32 -mtune=mips32r2 -mhard-float

# Vita
else ifeq ($(platform), vita)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = arm-vita-eabi-gcc$(EXE_EXT)
   CXX = arm-vita-eabi-g++$(EXE_EXT)
   AR = arm-vita-eabi-ar$(EXE_EXT)
   STATIC_LINKING = 1
   CFLAGS += -DVITA -ftree-vectorize -mfloat-abi=hard -ffast-math -fsingle-precision-constant -funroll-loops
   CXXFLAGS += -DVITA -ftree-vectorize -mfloat-abi=hard -ffast-math -fsingle-precision-constant -funroll-loops

# Windows
else
   TARGET := $(TARGET_NAME)_libretro.dll
   CC ?= gcc
   CC_AS ?= gcc
   CXX ?= g++
   SHARED := -shared -static-libgcc -static-libstdc++ -Wl,-no-undefined -Wl,-version-script=$(BUILD_DIR)/link.T
   LIBS += -lshlwapi
   HAVE_WIN32_MSX_MANAGER = 1

endif


ifeq ($(HAVE_COMPAT), 1)
   PLATFORM_DEFINES += -DHAVE_COMPAT
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g
   CXXFLAGS += -O0 -g
   OBJS += $(SOURCES_LUA_C:.c=.o)
else ifeq ($(platform), emscripten)
   CFLAGS += -O2 -DNDEBUG
   CXXFLAGS += -O2 -fno-exceptions -fno-rtti -DHAVE_STDINT_H -DNDEBUG
   OBJS += $(SOURCES_LUA_C:.c=.o)
else
   CFLAGS += -O3 -DNDEBUG
   CXXFLAGS += -O3 -fno-exceptions -fno-rtti -DHAVE_STDINT_H -DNDEBUG
   OBJS += $(SOURCES_LUA_C:.c=.o)
endif

ifeq ($(LOG_PERFORMANCE), 1)
   CFLAGS += -DLOG_PERFORMANCE
   CXXFLAGS += -DLOG_PERFORMANCE
endif


DEFINES := -D__LIBRETRO__ $(PLATFORM_DEFINES) -Drl_malloc=malloc -Drl_free=free -Dgwlua_malloc=malloc -Dgwlua_realloc=realloc -Dgwlua_free=free -Dgwrom_malloc=malloc -Dgwrom_free=free -DBZ_NO_STDIO

CFLAGS   += $(fpic) $(DEFINES)
CFLAGS   += -Wall

ifeq ($(platform), qnx)
CFLAGS   += -Wc,-std=c99
else
CFLAGS   += --std=c99
endif

CXXFLAGS += $(fpic) $(DEFINES)
CXXFLAGS += -Wall

LDFLAGS +=

ifeq ($(platform), osx)
ifndef ($(NOUNIVERSAL))
   CFLAGS += $(ARCHFLAGS)
   LFLAGS += $(ARCHFLAGS)
endif
endif

LUA_FILES =
PNG_FILES =

include $(BUILD_DIR)/Makefile.common

HEADERS = $(LUA_FILES:.lua=.h) $(PNG_FILES:.png=.h)
OBJS += $(SOURCES_C:.c=.o)

INCDIRS += $(EXTRA_INCLUDES) $(INCLUDES)

%.o: %.c
	$(CC) -c -o $@ $< $(CFLAGS) $(INCDIRS)

%.o: %.S
	$(CC_AS) -c -o $@ $< $(CFLAGS) $(INCDIRS)

ifeq ($(platform), theos_ios)
COMMON_FLAGS := -DIOS $(COMMON_DEFINES) $(INCLUDES) -I$(THEOS_INCLUDE_PATH) -Wno-error
$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
${LIBRARY_NAME}_LIBRARIES = z
include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)

$(TARGET): $(HEADERS) $(OBJS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJS)
else
	$(CC) -o $@ $(SHARED) $(OBJS) $(LDFLAGS) $(LIBS)
endif

$(CORE_DIR)/gwlua/functions.o: $(CORE_DIR)/gwlua/entries.c $(HEADERS)

$(CORE_DIR)/src/version.c: FORCE
	cat $(CORE_DIR)/etc/version.c.templ | sed s/VERSION/1.6.3/g | sed s/HASH/`git rev-parse HEAD | tr -d "\n"`/g > $@

clean-objs:
	rm -f $(OBJS)

clean:
	rm -f $(OBJS)
	rm -f $(TARGET)

.PHONY: clean clean-objs FORCE
endif

endif
