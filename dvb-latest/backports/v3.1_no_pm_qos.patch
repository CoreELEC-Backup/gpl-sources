diff --git a/drivers/media/pci/saa7134/saa7134-video.c b/drivers/media/pci/saa7134/saa7134-video.c
index f1452da..6996f5e 100644
--- a/drivers/media/pci/saa7134/saa7134-video.c
+++ b/drivers/media/pci/saa7134/saa7134-video.c
@@ -972,17 +972,6 @@ int saa7134_vb2_start_streaming(struct vb2_queue *vq, unsigned int count)
 		return -EBUSY;
 	}
 
-	/* The SAA7134 has a 1K FIFO; the datasheet suggests that when
-	 * configured conservatively, there's 22 usec of buffering for video.
-	 * We therefore request a DMA latency of 20 usec, giving us 2 usec of
-	 * margin in case the FIFO is configured differently to the datasheet.
-	 * Unfortunately, I lack register-level documentation to check the
-	 * Linux FIFO setup and confirm the perfect value.
-	 */
-	if ((dmaq == &dev->video_q && !vb2_is_streaming(&dev->vbi_vbq)) ||
-	    (dmaq == &dev->vbi_q && !vb2_is_streaming(&dev->video_vbq)))
-		pm_qos_add_request(&dev->qos_request,
-			PM_QOS_CPU_DMA_LATENCY, 20);
 	dmaq->seq_nr = 0;
 
 	return 0;
@@ -994,10 +983,6 @@ void saa7134_vb2_stop_streaming(struct vb2_queue *vq)
 	struct saa7134_dev *dev = dmaq->dev;
 
 	saa7134_stop_streaming(dev, dmaq);
-
-	if ((dmaq == &dev->video_q && !vb2_is_streaming(&dev->vbi_vbq)) ||
-	    (dmaq == &dev->vbi_q && !vb2_is_streaming(&dev->video_vbq)))
-		pm_qos_remove_request(&dev->qos_request);
 }
 
 static struct vb2_ops vb2_qops = {
diff --git a/drivers/media/pci/saa7134/saa7134.h b/drivers/media/pci/saa7134/saa7134.h
index e47edd4..ad5a673 100644
--- a/drivers/media/pci/saa7134/saa7134.h
+++ b/drivers/media/pci/saa7134/saa7134.h
@@ -29,7 +29,6 @@
 #include <linux/notifier.h>
 #include <linux/delay.h>
 #include <linux/mutex.h>
-#include <linux/pm_qos.h>
 
 #include <asm/io.h>
 
@@ -591,7 +590,6 @@ struct saa7134_dev {
 	struct saa7134_format      *fmt;
 	unsigned int               width, height;
 	unsigned int               vbi_hlen, vbi_vlen;
-	struct pm_qos_request	   qos_request;
 
 	/* SAA7134_MPEG_* */
 	struct saa7134_ts          ts;
diff --git a/drivers/media/platform/via-camera.c b/drivers/media/platform/via-camera.c
index b4f9d03..d91b2f9 100644
--- a/drivers/media/platform/via-camera.c
+++ b/drivers/media/platform/via-camera.c
@@ -22,7 +22,6 @@
 #include <media/videobuf-dma-sg.h>
 #include <linux/delay.h>
 #include <linux/dma-mapping.h>
-#include <linux/pm_qos.h>
 #include <linux/via-core.h>
 #include <linux/via-gpio.h>
 #include <linux/via_i2c.h>
@@ -71,7 +70,6 @@ struct via_camera {
 	struct mutex lock;
 	enum viacam_opstate opstate;
 	unsigned long flags;
-	struct pm_qos_request qos_request;
 	/*
 	 * GPIO info for power/reset management
 	 */
@@ -1064,13 +1062,6 @@ static int viacam_streamon(struct file *filp, void *priv, enum v4l2_buf_type t)
 			goto out;
 	}
 	/*
-	 * If the CPU goes into C3, the DMA transfer gets corrupted and
-	 * users start filing unsightly bug reports.  Put in a "latency"
-	 * requirement which will keep the CPU out of the deeper sleep
-	 * states.
-	 */
-	pm_qos_add_request(&cam->qos_request, PM_QOS_CPU_DMA_LATENCY, 50);
-	/*
 	 * Fire things up.
 	 */
 	INIT_LIST_HEAD(&cam->buffer_queue);
@@ -1094,7 +1085,6 @@ static int viacam_streamoff(struct file *filp, void *priv, enum v4l2_buf_type t)
 		ret = -EINVAL;
 		goto out;
 	}
-	pm_qos_remove_request(&cam->qos_request);
 	viacam_stop_engine(cam);
 	/*
 	 * Videobuf will recycle all of the outstanding buffers, but
