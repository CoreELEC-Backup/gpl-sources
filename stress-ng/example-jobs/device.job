#
# device class stressors:
#   various options have been commented out, one can remove the
#   proceeding comment to enable these options if required.

#
# run the following tests in parallel or sequentially
#
run sequential
# run parallel

#
# aggressive:
#   enables more file, cache and memory aggressive options. This may
#   slow tests down, increase latencies and  reduce  the  number  of
#   bogo  ops as well as changing the balance of user time vs system
#   time used depending on the type of stressor being used.
#
# aggressive

#
# ignite-cpu:
#   alter kernel controls to try and maximize the CPU. This requires
#   root  privilege  to alter various /sys interface controls.  Cur‐
#   rently this only works for Intel P-State enabled x86 systems  on
#   Linux.
#
# ignite-cpu

#
# keep-name:
#   by  default,  stress-ng  will  attempt to change the name of the
#   stress processes according to their functionality;  this  option
#   disables  this and keeps the process names to be the name of the
#   parent process, that is, stress-ng.
#
# keep-name

#
# metrics-brief:
#   enable metrics and only output metrics that are non-zero.
#
metrics-brief

#
# verbose
#   show all debug, warnings and normal information output.
#
verbose

#
# run each of the tests for 60 seconds
#  stop stress test after N seconds. One can also specify the units
#  of time in seconds, minutes, hours, days or years with the  suf‐
#  fix s, m, h, d or y.
#
timeout 60s

#
# per stressor options start here
#

#
# dev stressor options:
#   start N workers that exercise the /dev devices. Each worker runs
#   5 concurrent threads that perform open(2),  fstat(2),  lseek(2),
#   poll(2),  fcntl(2), mmap(2), munmap(2), fsync(2) and close(2) on
#   each device.  Note that watchdog devices are not exercised.
#
dev 0			# 0 means 1 stressor per CPU
# dev-ops 1000000	# stop after 1000000 bogo ops

#
# full stressor options:
#   start N workers that exercise /dev/full.  This attempts to write
#   to  the  device  (which should always get error ENOSPC), to read
#   from the device (which should always return a buffer  of  zeros)
#   and  to  seek  randomly  on the device (which should always suc‐
#   ceed).  (Linux only).
#
full 0			# 0 means 1 stressor per CPU
# full-ops 1000000	# stop after 1000000 bogo ops

#
# null stressor options:
#   start N workers writing to /dev/null
#
null 0			# 0 means 1 stressor per CPU
# null-ops 1000000	# stop after 1000000 bogo ops

#
# urandom stressor options:
#   start  N  workers  reading  /dev/urandom (Linux only). This will
#   load the kernel random number source.
urandom 0		# 0 means 1 stressor per CPU
# urandom-ops 1000000	# stop after 1000000 bogo ops

#
# zero stressor option:
#   start N workers reading /dev/zero
#
zero 0			# 0 means 1 stressor per CPU
zero-ops 1000000	# stop after 1000000 bogo ops
