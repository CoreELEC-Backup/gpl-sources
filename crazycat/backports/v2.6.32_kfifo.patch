diff --git a/drivers/media/i2c/cx25840/cx25840-ir.c b/drivers/media/i2c/cx25840/cx25840-ir.c
index 4cf8f18..facb846 100644
--- a/drivers/media/i2c/cx25840/cx25840-ir.c
+++ b/drivers/media/i2c/cx25840/cx25840-ir.c
@@ -117,7 +117,7 @@ struct cx25840_ir_state {
 	atomic_t rxclk_divider;
 	atomic_t rx_invert;
 
-	struct kfifo rx_kfifo;
+	struct kfifo *rx_kfifo;
 	spinlock_t rx_kfifo_lock; /* protect Rx data kfifo */
 
 	struct v4l2_subdev_ir_parameters tx_params;
@@ -524,7 +524,6 @@ int cx25840_ir_irq_handler(struct v4l2_subdev *sd, u32 status, bool *handled)
 	struct cx25840_state *state = to_state(sd);
 	struct cx25840_ir_state *ir_state = to_ir_state(sd);
 	struct i2c_client *c = NULL;
-	unsigned long flags;
 
 	union cx25840_ir_fifo_rec rx_data[FIFO_RX_DEPTH];
 	unsigned int i, j, k;
@@ -610,9 +609,8 @@ int cx25840_ir_irq_handler(struct v4l2_subdev *sd, u32 status, bool *handled)
 			if (i == 0)
 				break;
 			j = i * sizeof(union cx25840_ir_fifo_rec);
-			k = kfifo_in_locked(&ir_state->rx_kfifo,
-					    (unsigned char *) rx_data, j,
-					    &ir_state->rx_kfifo_lock);
+			k = kfifo_put(ir_state->rx_kfifo,
+					    (unsigned char *) rx_data, j);
 			if (k != j)
 				kror++; /* rx_kfifo over run */
 		}
@@ -648,10 +646,8 @@ int cx25840_ir_irq_handler(struct v4l2_subdev *sd, u32 status, bool *handled)
 		cx25840_write4(c, CX25840_IR_CNTRL_REG, cntrl);
 		*handled = true;
 	}
-	spin_lock_irqsave(&ir_state->rx_kfifo_lock, flags);
-	if (kfifo_len(&ir_state->rx_kfifo) >= CX25840_IR_RX_KFIFO_SIZE / 2)
+	if (kfifo_len(ir_state->rx_kfifo) >= CX25840_IR_RX_KFIFO_SIZE / 2)
 		events |= V4L2_SUBDEV_IR_RX_FIFO_SERVICE_REQ;
-	spin_unlock_irqrestore(&ir_state->rx_kfifo_lock, flags);
 
 	if (events)
 		v4l2_subdev_notify(sd, V4L2_SUBDEV_IR_RX_NOTIFY, &events);
@@ -682,8 +678,7 @@ static int cx25840_ir_rx_read(struct v4l2_subdev *sd, u8 *buf, size_t count,
 		return 0;
 	}
 
-	n = kfifo_out_locked(&ir_state->rx_kfifo, buf, n,
-			     &ir_state->rx_kfifo_lock);
+	n = kfifo_get(ir_state->rx_kfifo, buf, n);
 
 	n /= sizeof(union cx25840_ir_fifo_rec);
 	*num = n * sizeof(union cx25840_ir_fifo_rec);
@@ -839,11 +834,7 @@ static int cx25840_ir_rx_s_parameters(struct v4l2_subdev *sd,
 	o->interrupt_enable = p->interrupt_enable;
 	o->enable = p->enable;
 	if (p->enable) {
-		unsigned long flags;
-
-		spin_lock_irqsave(&ir_state->rx_kfifo_lock, flags);
-		kfifo_reset(&ir_state->rx_kfifo);
-		spin_unlock_irqrestore(&ir_state->rx_kfifo_lock, flags);
+		kfifo_reset(ir_state->rx_kfifo);
 		if (p->interrupt_enable)
 			irqenable_rx(sd, IRQEN_RSE | IRQEN_RTE | IRQEN_ROE);
 		control_rx_enable(c, p->enable);
@@ -1235,8 +1226,9 @@ int cx25840_ir_probe(struct v4l2_subdev *sd)
 		return -ENOMEM;
 
 	spin_lock_init(&ir_state->rx_kfifo_lock);
-	if (kfifo_alloc(&ir_state->rx_kfifo,
-			CX25840_IR_RX_KFIFO_SIZE, GFP_KERNEL))
+	ir_state->rx_kfifo = kfifo_alloc(CX25840_IR_RX_KFIFO_SIZE, GFP_KERNEL,
+				      &ir_state->rx_kfifo_lock);
+	if (IS_ERR(ir_state->rx_kfifo))
 		return -ENOMEM;
 
 	ir_state->c = state->c;
@@ -1270,7 +1262,7 @@ int cx25840_ir_remove(struct v4l2_subdev *sd)
 	cx25840_ir_rx_shutdown(sd);
 	cx25840_ir_tx_shutdown(sd);
 
-	kfifo_free(&ir_state->rx_kfifo);
+	kfifo_free(ir_state->rx_kfifo);
 	state->ir_state = NULL;
 	return 0;
 }
diff --git a/drivers/media/pci/cx23885/cx23888-ir.c b/drivers/media/pci/cx23885/cx23888-ir.c
index c1aa888..b04d70c 100644
--- a/drivers/media/pci/cx23885/cx23888-ir.c
+++ b/drivers/media/pci/cx23885/cx23888-ir.c
@@ -131,7 +131,7 @@ struct cx23888_ir_state {
 	atomic_t rxclk_divider;
 	atomic_t rx_invert;
 
-	struct kfifo rx_kfifo;
+	struct kfifo *rx_kfifo;
 	spinlock_t rx_kfifo_lock;
 
 	struct v4l2_subdev_ir_parameters tx_params;
@@ -531,7 +531,6 @@ static int cx23888_ir_irq_handler(struct v4l2_subdev *sd, u32 status,
 {
 	struct cx23888_ir_state *state = to_state(sd);
 	struct cx23885_dev *dev = state->dev;
-	unsigned long flags;
 
 	u32 cntrl = cx23888_ir_read4(dev, CX23888_IR_CNTRL_REG);
 	u32 irqen = cx23888_ir_read4(dev, CX23888_IR_IRQEN_REG);
@@ -604,10 +603,9 @@ static int cx23888_ir_irq_handler(struct v4l2_subdev *sd, u32 status,
 			}
 			if (i == 0)
 				break;
-			j = i * sizeof(union cx23888_ir_fifo_rec);
-			k = kfifo_in_locked(&state->rx_kfifo,
-				      (unsigned char *) rx_data, j,
-				      &state->rx_kfifo_lock);
+			j = i * sizeof(u32);
+			k = kfifo_put(state->rx_kfifo,
+				      (unsigned char *) rx_data, j);
 			if (k != j)
 				kror++; /* rx_kfifo over run */
 		}
@@ -644,10 +642,8 @@ static int cx23888_ir_irq_handler(struct v4l2_subdev *sd, u32 status,
 		*handled = true;
 	}
 
-	spin_lock_irqsave(&state->rx_kfifo_lock, flags);
-	if (kfifo_len(&state->rx_kfifo) >= CX23888_IR_RX_KFIFO_SIZE / 2)
+	if (kfifo_len(state->rx_kfifo) >= CX23888_IR_RX_KFIFO_SIZE / 2)
 		events |= V4L2_SUBDEV_IR_RX_FIFO_SERVICE_REQ;
-	spin_unlock_irqrestore(&state->rx_kfifo_lock, flags);
 
 	if (events)
 		v4l2_subdev_notify(sd, V4L2_SUBDEV_IR_RX_NOTIFY, &events);
@@ -673,7 +669,7 @@ static int cx23888_ir_rx_read(struct v4l2_subdev *sd, u8 *buf, size_t count,
 		return 0;
 	}
 
-	n = kfifo_out_locked(&state->rx_kfifo, buf, n, &state->rx_kfifo_lock);
+	n = kfifo_get(state->rx_kfifo, buf, n);
 
 	n /= sizeof(union cx23888_ir_fifo_rec);
 	*num = n * sizeof(union cx23888_ir_fifo_rec);
@@ -812,12 +808,7 @@ static int cx23888_ir_rx_s_parameters(struct v4l2_subdev *sd,
 	o->interrupt_enable = p->interrupt_enable;
 	o->enable = p->enable;
 	if (p->enable) {
-		unsigned long flags;
-
-		spin_lock_irqsave(&state->rx_kfifo_lock, flags);
-		kfifo_reset(&state->rx_kfifo);
-		/* reset tx_fifo too if there is one... */
-		spin_unlock_irqrestore(&state->rx_kfifo_lock, flags);
+		kfifo_reset(state->rx_kfifo);
 		if (p->interrupt_enable)
 			irqenable_rx(dev, IRQEN_RSE | IRQEN_RTE | IRQEN_ROE);
 		control_rx_enable(dev, p->enable);
@@ -1179,8 +1170,10 @@ int cx23888_ir_probe(struct cx23885_dev *dev)
 		return -ENOMEM;
 
 	spin_lock_init(&state->rx_kfifo_lock);
-	if (kfifo_alloc(&state->rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL))
-		return -ENOMEM;
+	state->rx_kfifo = kfifo_alloc(CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL,
+				      &state->rx_kfifo_lock);
+	if (IS_ERR(state->rx_kfifo))
+		return IS_ERR(state->rx_kfifo);
 
 	state->dev = dev;
 	sd = &state->sd;
@@ -1208,7 +1201,7 @@ int cx23888_ir_probe(struct cx23885_dev *dev)
 		default_params = default_tx_params;
 		v4l2_subdev_call(sd, ir, tx_s_parameters, &default_params);
 	} else {
-		kfifo_free(&state->rx_kfifo);
+		kfifo_free(state->rx_kfifo);
 	}
 	return ret;
 }
@@ -1227,7 +1220,7 @@ int cx23888_ir_remove(struct cx23885_dev *dev)
 
 	state = to_state(sd);
 	v4l2_device_unregister_subdev(sd);
-	kfifo_free(&state->rx_kfifo);
+	kfifo_free(state->rx_kfifo);
 	kfree(state);
 	/* Nothing more to free() as state held the actual v4l2_subdev object */
 	return 0;
diff --git a/drivers/media/pci/meye/meye.c b/drivers/media/pci/meye/meye.c
index aeae547..3d85fff 100644
--- a/drivers/media/pci/meye/meye.c
+++ b/drivers/media/pci/meye/meye.c
@@ -804,8 +804,8 @@ again:
 		return IRQ_HANDLED;
 
 	if (meye.mchip_mode == MCHIP_HIC_MODE_CONT_OUT) {
-		if (kfifo_out_locked(&meye.grabq, (unsigned char *)&reqnr,
-			      sizeof(int), &meye.grabq_lock) != sizeof(int)) {
+		if (kfifo_get(meye.grabq, (unsigned char *)&reqnr,
+			      sizeof(int)) != sizeof(int)) {
 			mchip_free_frame();
 			return IRQ_HANDLED;
 		}
@@ -815,8 +815,7 @@ again:
 		meye.grab_buffer[reqnr].state = MEYE_BUF_DONE;
 		v4l2_get_timestamp(&meye.grab_buffer[reqnr].timestamp);
 		meye.grab_buffer[reqnr].sequence = sequence++;
-		kfifo_in_locked(&meye.doneq, (unsigned char *)&reqnr,
-				sizeof(int), &meye.doneq_lock);
+		kfifo_put(meye.doneq, (unsigned char *)&reqnr, sizeof(int));
 		wake_up_interruptible(&meye.proc_list);
 	} else {
 		int size;
@@ -825,8 +824,8 @@ again:
 			mchip_free_frame();
 			goto again;
 		}
-		if (kfifo_out_locked(&meye.grabq, (unsigned char *)&reqnr,
-			      sizeof(int), &meye.grabq_lock) != sizeof(int)) {
+		if (kfifo_get(meye.grabq, (unsigned char *)&reqnr,
+			      sizeof(int)) != sizeof(int)) {
 			mchip_free_frame();
 			goto again;
 		}
@@ -836,8 +835,7 @@ again:
 		meye.grab_buffer[reqnr].state = MEYE_BUF_DONE;
 		v4l2_get_timestamp(&meye.grab_buffer[reqnr].timestamp);
 		meye.grab_buffer[reqnr].sequence = sequence++;
-		kfifo_in_locked(&meye.doneq, (unsigned char *)&reqnr,
-				sizeof(int), &meye.doneq_lock);
+		kfifo_put(meye.doneq, (unsigned char *)&reqnr, sizeof(int));
 		wake_up_interruptible(&meye.proc_list);
 	}
 	mchip_free_frame();
@@ -865,8 +863,8 @@ static int meye_open(struct file *file)
 
 	for (i = 0; i < MEYE_MAX_BUFNBRS; i++)
 		meye.grab_buffer[i].state = MEYE_BUF_UNUSED;
-	kfifo_reset(&meye.grabq);
-	kfifo_reset(&meye.doneq);
+	kfifo_reset(meye.grabq);
+	kfifo_reset(meye.doneq);
 	return v4l2_fh_open(file);
 }
 
@@ -939,8 +937,7 @@ static int meyeioc_qbuf_capt(int *nb)
 		mchip_cont_compression_start();
 
 	meye.grab_buffer[*nb].state = MEYE_BUF_USING;
-	kfifo_in_locked(&meye.grabq, (unsigned char *)nb, sizeof(int),
-			 &meye.grabq_lock);
+	kfifo_put(meye.grabq, (unsigned char *)nb, sizeof(int));
 	mutex_unlock(&meye.lock);
 
 	return 0;
@@ -972,9 +969,7 @@ static int meyeioc_sync(struct file *file, void *fh, int *i)
 		/* fall through */
 	case MEYE_BUF_DONE:
 		meye.grab_buffer[*i].state = MEYE_BUF_UNUSED;
-		if (kfifo_out_locked(&meye.doneq, (unsigned char *)&unused,
-				sizeof(int), &meye.doneq_lock) != sizeof(int))
-					break;
+		kfifo_get(meye.doneq, (unsigned char *)&unused, sizeof(int));
 	}
 	*i = meye.grab_buffer[*i].size;
 	mutex_unlock(&meye.lock);
@@ -1319,8 +1314,7 @@ static int vidioc_qbuf(struct file *file, void *fh, struct v4l2_buffer *buf)
 	buf->flags |= V4L2_BUF_FLAG_QUEUED;
 	buf->flags &= ~V4L2_BUF_FLAG_DONE;
 	meye.grab_buffer[buf->index].state = MEYE_BUF_USING;
-	kfifo_in_locked(&meye.grabq, (unsigned char *)&buf->index,
-			sizeof(int), &meye.grabq_lock);
+	kfifo_put(meye.grabq, (unsigned char *)&buf->index, sizeof(int));
 	mutex_unlock(&meye.lock);
 
 	return 0;
@@ -1335,19 +1329,19 @@ static int vidioc_dqbuf(struct file *file, void *fh, struct v4l2_buffer *buf)
 
 	mutex_lock(&meye.lock);
 
-	if (kfifo_len(&meye.doneq) == 0 && file->f_flags & O_NONBLOCK) {
+	if (kfifo_len(meye.doneq) == 0 && file->f_flags & O_NONBLOCK) {
 		mutex_unlock(&meye.lock);
 		return -EAGAIN;
 	}
 
 	if (wait_event_interruptible(meye.proc_list,
-				     kfifo_len(&meye.doneq) != 0) < 0) {
+				     kfifo_len(meye.doneq) != 0) < 0) {
 		mutex_unlock(&meye.lock);
 		return -EINTR;
 	}
 
-	if (!kfifo_out_locked(&meye.doneq, (unsigned char *)&reqnr,
-		       sizeof(int), &meye.doneq_lock)) {
+	if (!kfifo_get(meye.doneq, (unsigned char *)&reqnr,
+		       sizeof(int))) {
 		mutex_unlock(&meye.lock);
 		return -EBUSY;
 	}
@@ -1397,8 +1391,8 @@ static int vidioc_streamoff(struct file *file, void *fh, enum v4l2_buf_type i)
 {
 	mutex_lock(&meye.lock);
 	mchip_hic_stop();
-	kfifo_reset(&meye.grabq);
-	kfifo_reset(&meye.doneq);
+	kfifo_reset(meye.grabq);
+	kfifo_reset(meye.doneq);
 
 	for (i = 0; i < MEYE_MAX_BUFNBRS; i++)
 		meye.grab_buffer[i].state = MEYE_BUF_UNUSED;
@@ -1441,7 +1435,7 @@ static unsigned int meye_poll(struct file *file, poll_table *wait)
 
 	mutex_lock(&meye.lock);
 	poll_wait(file, &meye.proc_list, wait);
-	if (kfifo_len(&meye.doneq))
+	if (kfifo_len(meye.doneq))
 		res |= POLLIN | POLLRDNORM;
 	mutex_unlock(&meye.lock);
 	return res;
@@ -1649,14 +1643,16 @@ static int meye_probe(struct pci_dev *pcidev, const struct pci_device_id *ent)
 	}
 
 	spin_lock_init(&meye.grabq_lock);
-	if (kfifo_alloc(&meye.grabq, sizeof(int) * MEYE_MAX_BUFNBRS,
-				GFP_KERNEL)) {
+	meye.grabq = kfifo_alloc(sizeof(int) * MEYE_MAX_BUFNBRS, GFP_KERNEL,
+				 &meye.grabq_lock);
+	if (IS_ERR(meye.grabq)) {
 		v4l2_err(v4l2_dev, "fifo allocation failed\n");
 		goto outkfifoalloc1;
 	}
 	spin_lock_init(&meye.doneq_lock);
-	if (kfifo_alloc(&meye.doneq, sizeof(int) * MEYE_MAX_BUFNBRS,
-				GFP_KERNEL)) {
+	meye.doneq = kfifo_alloc(sizeof(int) * MEYE_MAX_BUFNBRS, GFP_KERNEL,
+				 &meye.doneq_lock);
+	if (IS_ERR(meye.doneq)) {
 		v4l2_err(v4l2_dev, "fifo allocation failed\n");
 		goto outkfifoalloc2;
 	}
@@ -1774,9 +1770,9 @@ outregions:
 outenabledev:
 	sony_pic_camera_command(SONY_PIC_COMMAND_SETCAMERA, 0);
 outsonypienable:
-	kfifo_free(&meye.doneq);
+	kfifo_free(meye.doneq);
 outkfifoalloc2:
-	kfifo_free(&meye.grabq);
+	kfifo_free(meye.grabq);
 outkfifoalloc1:
 	vfree(meye.grab_temp);
 outvmalloc:
@@ -1807,8 +1803,8 @@ static void meye_remove(struct pci_dev *pcidev)
 
 	sony_pic_camera_command(SONY_PIC_COMMAND_SETCAMERA, 0);
 
-	kfifo_free(&meye.doneq);
-	kfifo_free(&meye.grabq);
+	kfifo_free(meye.doneq);
+	kfifo_free(meye.grabq);
 
 	vfree(meye.grab_temp);
 
diff --git a/drivers/media/pci/meye/meye.h b/drivers/media/pci/meye/meye.h
index 6fed927..77aad1f 100644
--- a/drivers/media/pci/meye/meye.h
+++ b/drivers/media/pci/meye/meye.h
@@ -306,9 +306,9 @@ struct meye {
 	struct meye_grab_buffer grab_buffer[MEYE_MAX_BUFNBRS];
 	int vma_use_count[MEYE_MAX_BUFNBRS]; /* mmap count */
 	struct mutex lock;		/* mutex for open/mmap... */
-	struct kfifo grabq;		/* queue for buffers to be grabbed */
+	struct kfifo *grabq;		/* queue for buffers to be grabbed */
 	spinlock_t grabq_lock;		/* lock protecting the queue */
-	struct kfifo doneq;		/* queue for grabbed buffers */
+	struct kfifo *doneq;		/* queue for grabbed buffers */
 	spinlock_t doneq_lock;		/* lock protecting the queue */
 	wait_queue_head_t proc_list;	/* wait queue */
 	struct video_device *vdev;	/* video device parameters */
diff --git a/drivers/media/rc/rc-core-priv.h b/drivers/media/rc/rc-core-priv.h
index 84967ca..2aca801 100644
--- a/drivers/media/rc/rc-core-priv.h
+++ b/drivers/media/rc/rc-core-priv.h
@@ -35,7 +35,7 @@ struct ir_raw_event_ctrl {
 	struct list_head		list;		/* to keep track of raw clients */
 	struct task_struct		*thread;
 	spinlock_t			lock;
-	struct kfifo			kfifo;		/* fifo for the pulse/space durations */
+	struct kfifo			*kfifo;		/* fifo for the pulse/space durations */
 	ktime_t				last_event;	/* when last event occurred */
 	enum raw_event_type		last_type;	/* last event type */
 	struct rc_dev			*dev;		/* pointer to the parent rc_dev */
diff --git a/drivers/media/rc/rc-ir-raw.c b/drivers/media/rc/rc-ir-raw.c
index e8fff2a..7709c32 100644
--- a/drivers/media/rc/rc-ir-raw.c
+++ b/drivers/media/rc/rc-ir-raw.c
@@ -41,7 +41,7 @@ static int ir_raw_event_thread(void *data)
 	while (!kthread_should_stop()) {
 
 		spin_lock_irq(&raw->lock);
-		retval = kfifo_len(&raw->kfifo);
+		retval = kfifo_len(raw->kfifo);
 
 		if (retval < sizeof(ev)) {
 			set_current_state(TASK_INTERRUPTIBLE);
@@ -54,7 +54,7 @@ static int ir_raw_event_thread(void *data)
 			continue;
 		}
 
-		retval = kfifo_out(&raw->kfifo, &ev, sizeof(ev));
+		retval = __kfifo_get(raw->kfifo, (void *)&ev, sizeof(ev));
 		spin_unlock_irq(&raw->lock);
 
 		mutex_lock(&ir_raw_handler_lock);
@@ -85,7 +85,7 @@ int ir_raw_event_store(struct rc_dev *dev, struct ir_raw_event *ev)
 	IR_dprintk(2, "sample: (%05dus %s)\n",
 		   TO_US(ev->duration), TO_STR(ev->pulse));
 
-	if (kfifo_in(&dev->raw->kfifo, ev, sizeof(*ev)) != sizeof(*ev))
+	if (__kfifo_put(dev->raw->kfifo, (void *)ev, sizeof(*ev)) != sizeof(*ev))
 		return -ENOMEM;
 
 	return 0;
@@ -264,11 +264,11 @@ int ir_raw_event_register(struct rc_dev *dev)
 	dev->raw->dev = dev;
 	dev->enabled_protocols = ~0;
 	dev->change_protocol = change_protocol;
-	rc = kfifo_alloc(&dev->raw->kfifo,
-			 sizeof(struct ir_raw_event) * MAX_IR_EVENT_SIZE,
-			 GFP_KERNEL);
-	if (rc < 0)
+	dev->raw->kfifo = kfifo_alloc(sizeof(struct ir_raw_event) * MAX_IR_EVENT_SIZE, GFP_KERNEL, NULL);
+	if (IS_ERR(dev->raw->kfifo)) {
+		rc = PTR_ERR(dev->raw->kfifo);
 		goto out;
+	}
 
 	spin_lock_init(&dev->raw->lock);
 	dev->raw->thread = kthread_run(ir_raw_event_thread, dev->raw,
@@ -310,7 +310,7 @@ void ir_raw_event_unregister(struct rc_dev *dev)
 			handler->raw_unregister(dev);
 	mutex_unlock(&ir_raw_handler_lock);
 
-	kfifo_free(&dev->raw->kfifo);
+	kfifo_free(dev->raw->kfifo);
 	kfree(dev->raw);
 	dev->raw = NULL;
 }
diff --git a/drivers/staging/media/lirc/lirc_zilog.c b/drivers/staging/media/lirc/lirc_zilog.c
index 1ccf626..b0e514b 100644
--- a/drivers/staging/media/lirc/lirc_zilog.c
+++ b/drivers/staging/media/lirc/lirc_zilog.c
@@ -199,7 +199,7 @@ static void release_ir_device(struct kref *ref)
 		lirc_unregister_driver(ir->l.minor);
 		ir->l.minor = MAX_IRCTL_DEVICES;
 	}
-	if (kfifo_initialized(&ir->rbuf.fifo))
+	if (ir->rbuf.fifo)
 		lirc_buffer_free(&ir->rbuf);
 	list_del(&ir->list);
 	kfree(ir);
diff --git a/include/media/lirc_dev.h b/include/media/lirc_dev.h
index 05e7ad5..f40097c 100644
--- a/include/media/lirc_dev.h
+++ b/include/media/lirc_dev.h
@@ -28,18 +28,14 @@ struct lirc_buffer {
 	unsigned int size; /* in chunks */
 	/* Using chunks instead of bytes pretends to simplify boundary checking
 	 * And should allow for some performance fine tunning later */
-	struct kfifo fifo;
+	struct kfifo *fifo;
 };
 
 static inline void lirc_buffer_clear(struct lirc_buffer *buf)
 {
-	unsigned long flags;
-
-	if (kfifo_initialized(&buf->fifo)) {
-		spin_lock_irqsave(&buf->fifo_lock, flags);
-		kfifo_reset(&buf->fifo);
-		spin_unlock_irqrestore(&buf->fifo_lock, flags);
-	} else
+	if (buf->fifo)
+		kfifo_reset(buf->fifo);
+	else
 		WARN(1, "calling %s on an uninitialized lirc_buffer\n",
 		     __func__);
 }
@@ -48,22 +44,23 @@ static inline int lirc_buffer_init(struct lirc_buffer *buf,
 				    unsigned int chunk_size,
 				    unsigned int size)
 {
-	int ret;
-
 	init_waitqueue_head(&buf->wait_poll);
 	spin_lock_init(&buf->fifo_lock);
 	buf->chunk_size = chunk_size;
 	buf->size = size;
-	ret = kfifo_alloc(&buf->fifo, size * chunk_size, GFP_KERNEL);
+	buf->fifo = kfifo_alloc(size * chunk_size, GFP_KERNEL,
+				&buf->fifo_lock);
+	if (IS_ERR(buf->fifo))
+		return IS_ERR(buf->fifo);
 
-	return ret;
+	return 0;
 }
 
 static inline void lirc_buffer_free(struct lirc_buffer *buf)
 {
-	if (kfifo_initialized(&buf->fifo)) {
-		kfifo_free(&buf->fifo);
-	} else
+	if (buf->fifo)
+		kfifo_free(buf->fifo);
+	else
 		WARN(1, "calling %s on an uninitialized lirc_buffer\n",
 		     __func__);
 }
@@ -71,11 +68,8 @@ static inline void lirc_buffer_free(struct lirc_buffer *buf)
 static inline int lirc_buffer_len(struct lirc_buffer *buf)
 {
 	int len;
-	unsigned long flags;
 
-	spin_lock_irqsave(&buf->fifo_lock, flags);
-	len = kfifo_len(&buf->fifo);
-	spin_unlock_irqrestore(&buf->fifo_lock, flags);
+	len = kfifo_len(buf->fifo);
 
 	return len;
 }
@@ -98,24 +92,19 @@ static inline int lirc_buffer_available(struct lirc_buffer *buf)
 static inline unsigned int lirc_buffer_read(struct lirc_buffer *buf,
 					    unsigned char *dest)
 {
-	unsigned int ret = 0;
-
 	if (lirc_buffer_len(buf) >= buf->chunk_size)
-		ret = kfifo_out_locked(&buf->fifo, dest, buf->chunk_size,
-				       &buf->fifo_lock);
-	return ret;
+		kfifo_get(buf->fifo, dest, buf->chunk_size);
+
+	return 0;
 
 }
 
 static inline unsigned int lirc_buffer_write(struct lirc_buffer *buf,
 					     unsigned char *orig)
 {
-	unsigned int ret;
-
-	ret = kfifo_in_locked(&buf->fifo, orig, buf->chunk_size,
-			      &buf->fifo_lock);
+	kfifo_put(buf->fifo, orig, buf->chunk_size);
 
-	return ret;
+	return 0;
 }
 
 struct lirc_driver {
